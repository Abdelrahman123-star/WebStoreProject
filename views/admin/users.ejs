<!-- User Management -->
<%- include('adminComponents/head') %>
<%- include('adminComponents/header') %>
<%- include('adminComponents/slidebar') %>
<%- include('adminComponents/switchLanguage') %>

    <main class="admin-main">

      <section id="users" class="user-management">
        <div class="products-header">
          <h2 data-i18n="adminUsers.title">User Management</h2>
          <div class="header-actions">
            <div class="search-container">
              <input type="text" id="userSearch" data-i18n-placeholder="adminUsers.searchPlaceholder" placeholder="Search users..." class="search-input">
            </div>
            <button class="add-product">
              <i class="fas fa-plus"></i>
              <span data-i18n="adminUsers.addUser">Add User</span>
            </button>
          </div>
        </div>
        

      <% let successMsg = null, errorMsg = null;
        if (messages && messages.success && messages.success.length > 0) successMsg = messages.success[0];
        if (success && success.length > 0) successMsg = success[0] || success;
        if (messages && messages.error && messages.error.length > 0) errorMsg = messages.error[0];
        if (error && error.length > 0) errorMsg = error[0] || error;
      %>
      <% if (successMsg) { %>
        <div class="alert alert-success" id="flash-success"><%= successMsg %></div>
      <% } %>
      <% if (errorMsg) { %>
        <div class="alert alert-danger" id="flash-error"><%= errorMsg %></div>
      <% } %>
      <script>
        setTimeout(function() {
          var success = document.getElementById('flash-success');
          if (success) success.style.display = 'none';
          var error = document.getElementById('flash-error');
          if (error) error.style.display = 'none';
        }, 3000);
      </script>


        
        <style>
          .products-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #f0f0f0;
          }

          .products-header h2 {
            font-size: 1.8rem;
            color: #2d3436;
            margin: 0;
          }

          .add-product {
            background: #ff5722;
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
          }

          .add-product:hover {
            background: #e64a19;
            transform: translateY(-2px);
          }

          .users-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
          }

          .user-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            overflow: hidden;
            transition: all 0.3s ease;
            position: relative;
          }

          .user-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
          }

          .user-header {
            padding: 1.5rem;
            background: #f8f9fa;
            border-bottom: 1px solid #eee;
          }

          .user-name {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2d3436;
            margin-bottom: 0.5rem;
          }

          .user-role {
            display: inline-block;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            background: #e3f2fd;
            color: #1976d2;
          }

          .user-role.admin {
            background: #e8f5e9;
            color: #2e7d32;
          }

          .user-info {
            padding: 1.5rem;
          }

          .info-group {
            margin-bottom: 1rem;
          }

          .info-label {
            font-size: 0.8rem;
            color: #636e72;
            margin-bottom: 0.3rem;
          }

          .info-value {
            font-weight: 500;
            color: #2d3436;
          }

          .user-actions {
            display: flex;
            gap: 0.5rem;
            padding: 1rem 1.5rem;
            background: #f8f9fa;
            border-top: 1px solid #eee;
          }

          .action-button {
            flex: 1;
            padding: 0.8rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
          }

          .edit-button {
            background: #00b894;
            color: white;
          }

          .edit-button:hover {
            background: #00a884;
          }

          .delete-button {
            background: #ff7675;
            color: white;
          }

          .delete-button:hover {
            background: #e66767;
          }

          .pagination {
            display: flex;
            justify-content: center;
            margin-top: 2rem;
          }

          .pagination-list {
            display: flex;
            gap: 0.5rem;
            list-style: none;
            padding: 0;
            margin: 0;
          }

          .pagination-item {
            margin: 0;
          }

          .pagination-link {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            border-radius: 8px;
            background: white;
            color: #2d3436;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            border: 1px solid #f0f0f0;
          }

          .pagination-item.active .pagination-link {
            background: #ff5722;
            color: white;
            border-color: #ff5722;
          }

          .pagination-item:not(.disabled) .pagination-link:hover {
            background: #f8f9fa;
            transform: translateY(-2px);
          }

          .pagination-item.disabled .pagination-link {
            color: #b2bec3;
            cursor: not-allowed;
          }

          .header-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
          }

          .search-container {
            position: relative;
            min-width: 300px;
          }

          .search-input {
            width: 100%;
            padding: 0.8rem 1rem 0.8rem 2.5rem;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
          }

          .search-input:focus {
            outline: none;
            border-color: #ff5722;
            box-shadow: 0 0 0 2px rgba(255, 87, 34, 0.1);
          }

          .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #636e72;
          }

          @media (max-width: 768px) {
            .users-grid {
              grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }

            .products-header {
              flex-direction: column;
              gap: 1rem;
              align-items: flex-start;
            }

            .header-actions {
              flex-direction: column;
              width: 100%;
            }

            .search-container {
              width: 100%;
            }

            .add-product {
              width: 100%;
            }
          }
        </style>

        <div class="users-grid">
          <% users.forEach(user => { %>
            <div class="user-card">
              <div class="user-header">
                <h3 class="user-name"><%= user.username %></h3>
                <span class="user-role <%= user.role %>" data-i18n="adminUsers.role.<%= user.role %>"><%= user.role %></span>
              </div>
              <div class="user-info">
                <div class="info-group">
                  <div class="info-label" data-i18n="adminUsers.email">Email</div>
                  <div class="info-value"><%= user.email %></div>
                </div>
                <div class="info-group">
                  <div class="info-label" data-i18n="adminUsers.phone">Phone</div>
                  <div class="info-value"><%= user.phone %></div>
                </div>
                <div class="info-group">
                  <div class="info-label" data-i18n="adminUsers.location">Location</div>
                  <div class="info-value"><%= user.street %>, <%= user.city %></div>
                </div>
              </div>
              <div class="user-actions">
                <button class="action-button edit-button edit" 
                  data-id="<%= user._id %>"
                  data-username="<%= user.username %>"
                  data-email="<%= user.email %>"
                  data-role="<%= user.role %>"
                  data-street="<%= user.street %>"
                  data-city="<%= user.city %>"
                  data-phone="<%= user.phone %>">
                  <i class="fas fa-edit"></i>
                  <span data-i18n="adminUsers.edit">Edit</span>
                </button>
                <form action="/admin/users/delete" method="POST" style="flex: 1;">
                  <input type="hidden" name="id" value="<%= user._id %>">
                  <button type="submit" class="action-button delete-button">
                    <i class="fas fa-trash"></i>
                    <span data-i18n="adminUsers.delete">Delete</span>
                  </button>
                </form>
              </div>
            </div>
          <% }); %>
        </div>

        <!-- Pagination Controls -->
        <div class="pagination">
          <% if (totalPages > 1) { %>
            <ul class="pagination-list">
              <li class="pagination-item <%= currentPage === 1 ? 'disabled' : '' %>">
                <% if (currentPage === 1) { %>
                  <span class="pagination-link">&laquo;</span>
                <% } else { %>
                  <a class="pagination-link" href="?page=<%= currentPage - 1 %>">&laquo;</a>
                <% } %>
              </li>
              <% for (let i = 1; i <= totalPages; i++) { %>
                <li class="pagination-item <%= i === currentPage ? 'active' : '' %>">
                  <% if (i === currentPage) { %>
                    <span class="pagination-link"><%= i %></span>
                  <% } else { %>
                    <a class="pagination-link" href="?page=<%= i %>"><%= i %></a>
                  <% } %>
                </li>
              <% } %>
              <li class="pagination-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                <% if (currentPage === totalPages) { %>
                  <span class="pagination-link">&raquo;</span>
                <% } else { %>
                  <a class="pagination-link" href="?page=<%= currentPage + 1 %>">&raquo;</a>
                <% } %>
              </li>
            </ul>
          <% } %>
        </div>
      </section>

      </main>



<!-- Modern Edit User Modal -->
<div id="editUserModal" class="modal-wrapper">
  <div class="modal-box">
    <div class="modal-header">
      <h2 id="addoreditUser" data-i18n="adminUsers.editUser">Edit User</h2>
      <span class="modal-close" id="closeModal">&times;</span>
    </div>
    <form id="editUserForm" class="modal-body" method="POST">
      <input type="hidden" id="editUserId" name="id">
      <div>
        <label for="editUsername" data-i18n="adminUsers.name">Name</label>
        <input type="text" id="editUsername" name="username" required>
      </div>
      <div>
        <label for="editEmail" data-i18n="adminUsers.email">Email</label>
        <input type="email" id="editEmail" name="email" required>
      </div>
      <div>
        <label for="editPassword" id="passwordLabel" data-i18n="adminUsers.password">Password</label>
        <input type="password" id="editPassword" name="password">
      </div>
      <div>
        <label for="editRole" data-i18n="adminUsers.roleLabel">Role</label>
        <select id="editRole" name="role">
          <option value="admin" data-i18n="adminUsers.role.admin">Admin</option>
          <option value="customer" data-i18n="adminUsers.role.customer">Customer</option>
        </select>
      </div>
      <div class="leabel_flex">
        <label for="editStreet" data-i18n="adminUsers.street">Street</label>
        <label for="editCity" data-i18n="adminUsers.city">City</label>
      </div>
      <div class="flex_row">
        <input type="text" id="editStreet" name="street" required>
        <input type="text" id="editCity" name="city" required>
      </div>
      <div>
        <label for="editphone" data-i18n="adminUsers.phone">Phone Number</label>
        <input type="tel" id="editPhone" name="phone" required>
      </div>
      <button type="submit" class="modal-save">
        <i class="fas fa-save"></i>
        <span data-i18n="adminUsers.saveChanges">Save Changes</span>
      </button>
    </form>
  </div>
</div>

    <style>
      /* Add highlight styling */
      .highlight {
        background-color: #fff3cd;
        padding: 2px 4px;
        border-radius: 3px;
        font-weight: bold;
        color: #856404;
      }

      /* No results message styling */
      .no-results {
        text-align: center;
        padding: 2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin: 2rem 0;
      }

      .no-results i {
        font-size: 3rem;
        color: #b2bec3;
        margin-bottom: 1rem;
      }

      .no-results h3 {
        color: #2d3436;
        margin-bottom: 0.5rem;
        font-size: 1.2rem;
      }

      .no-results p {
        color: #636e72;
        font-size: 0.9rem;
      }

      /* Modern Modal styling */
      .modal-wrapper {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(5px);
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .modal-wrapper.active {
        opacity: 1;
      }

      .modal-box {
        background: white;
        padding: 2.5rem;
        border-radius: 16px;
        width: 90%;
        max-width: 550px;
        position: relative;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        transform: translateY(20px);
        transition: transform 0.3s ease;
        max-height: 90vh; /* Set maximum height to 90% of viewport height */
        overflow-y: auto; /* Enable vertical scrolling */
        display: flex; /* Ensure inner content is managed */
        flex-direction: column;
      }

      .modal-wrapper.active .modal-box {
        transform: translateY(0);
      }

      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f0f0f0;
      }

      .modal-header h2 {
        margin: 0;
        color: #2d3436;
        font-size: 1.8rem;
        font-weight: 600;
      }

      .modal-close {
        font-size: 1.8rem;
        color: #636e72;
        cursor: pointer;
        transition: all 0.3s ease;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: #f8f9fa;
      }

      .modal-close:hover {
        color: #ff5722;
        background: #fff5f2;
        transform: rotate(90deg);
      }

      .modal-body {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        flex: 1; /* Allow modal body to grow and shrink */
        overflow-y: auto; /* Enable scrolling for the form content */
        padding-right: 5px; /* Add some padding for the scrollbar */
      }

      .modal-body label {
        color: #2d3436;
        font-weight: 500;
        font-size: 0.95rem;
        margin-bottom: 0.5rem;
        display: block;
      }

      .modal-body input,
      .modal-body select {
        padding: 1rem;
        border: 2px solid #e0e0e0;
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #f8f9fa;
        width: 100%;
      }

      .modal-body input:focus,
      .modal-body select:focus {
        outline: none;
        border-color: #ff5722;
        background: white;
        box-shadow: 0 0 0 4px rgba(255, 87, 34, 0.1);
      }

      .leabel_flex {
        display: flex;
        justify-content: space-between;
        gap: 1.5rem;
      }

      .flex_row {
        display: flex;
        gap: 1.5rem;
      }

      .flex_row input {
        flex: 1;
      }

      .modal-save {
        background: #ff5722;
        color: white;
        border: none;
        padding: 1rem;
        border-radius: 12px;
        cursor: pointer;
        font-weight: 600;
        font-size: 1rem;
        margin-top: 1.5rem;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
      }

      .modal-save:hover {
        background: #e64a19;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(255, 87, 34, 0.2);
      }

      .modal-save:active {
        transform: translateY(0);
      }

      @media (max-width: 768px) {
        .modal-box {
          padding: 1.5rem;
          width: 95%;
        }

        .leabel_flex,
        .flex_row {
          flex-direction: column;
          gap: 1rem;
        }
      }
    </style>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('userSearch');
        const usersGrid = document.querySelector('.users-grid');
        let searchTimeout;

        // Function to highlight text
        function highlightText(text, searchTerm) {
          if (!searchTerm) return text;
          const regex = new RegExp(`(${searchTerm})`, 'gi');
          return text.replace(regex, '<span class="highlight">$1</span>');
        }

        // Function to render user card
        function renderUserCard(user, searchTerm = '') {
          return `
            <div class="user-card">
              <div class="user-header">
                <h3 class="user-name">${highlightText(user.username, searchTerm)}</h3>
                <span class="user-role ${user.role}" data-i18n="adminUsers.roles.${user.role}">${i18next.t(`adminUsers.roles.${user.role}`)}</span>
              </div>
              <div class="user-info">
                <div class="info-group">
                  <div class="info-label" data-i18n="adminUsers.email">${i18next.t('adminUsers.email')}</div>
                  <div class="info-value">${highlightText(user.email, searchTerm)}</div>
                </div>
                <div class="info-group">
                  <div class="info-label" data-i18n="adminUsers.phone">${i18next.t('adminUsers.phone')}</div>
                  <div class="info-value">${highlightText(user.phone, searchTerm)}</div>
                </div>
                <div class="info-group">
                  <div class="info-label" data-i18n="adminUsers.location">${i18next.t('adminUsers.location')}</div>
                  <div class="info-value">${highlightText(user.street, searchTerm)}, ${highlightText(user.city, searchTerm)}</div>
                </div>
              </div>
              <div class="user-actions">
                <button class="action-button edit-button edit" 
                  data-id="${user._id}"
                  data-username="${user.username}"
                  data-email="${user.email}"
                  data-role="${user.role}"
                  data-street="${user.street}"
                  data-city="${user.city}"
                  data-phone="${user.phone}">
                  <i class="fas fa-edit"></i>
                  <span data-i18n="adminUsers.edit">${i18next.t('adminUsers.edit')}</span>
                </button>
                <form action="/admin/users/delete" method="POST" style="flex: 1;">
                  <input type="hidden" name="id" value="${user._id}">
                  <button type="submit" class="action-button delete-button">
                    <i class="fas fa-trash"></i>
                    <span data-i18n="adminUsers.deleteButton">${i18next.t('adminUsers.deleteButton')}</span>
                  </button>
                </form>
              </div>
            </div>
          `;
        }

        // Function to show no results message
        function showNoResults(searchTerm) {
          return `
            <div class="no-results">
              <i class="fas fa-search"></i>
              <h3 data-i18n="adminUsers.noUsersFound">${i18next.t('adminUsers.noUsersFound')}</h3>
              <p data-i18n="adminUsers.noUsersFoundMessage">${i18next.t('adminUsers.noUsersFoundMessage', { searchTerm })}</p>
            </div>
          `;
        }

        // Function to fetch and display users
        async function fetchAndDisplayUsers(searchTerm = '') {
          try {
            const response = await fetch(`/admin/users/search?q=${encodeURIComponent(searchTerm)}`);
            const data = await response.json();
            
            if (data.users) {
              if (searchTerm.trim() === '') {
                // If search is empty, fetch all users from the current page
                window.location.reload();
                return;
              }
              
              if (data.users.length === 0) {
                usersGrid.innerHTML = showNoResults(searchTerm);
              } else {
                usersGrid.innerHTML = data.users.map(user => renderUserCard(user, searchTerm)).join('');
                attachEditButtonListeners();
              }
            }
          } catch (error) {
            console.error('Error searching users:', error);
            usersGrid.innerHTML = `
              <div class="no-results">
                <i class="fas fa-exclamation-circle"></i>
                <h3>Error</h3>
                <p>Failed to search users. Please try again.</p>
              </div>
            `;
          }
        }

        searchInput.addEventListener('input', function(e) {
          clearTimeout(searchTimeout);
          const searchTerm = e.target.value.trim();

          searchTimeout = setTimeout(() => {
            fetchAndDisplayUsers(searchTerm);
          }, 300);
        });

        function attachEditButtonListeners() {
          document.querySelectorAll('.edit').forEach(button => {
            button.addEventListener('click', function() {
              const id = this.dataset.id;
              const username = this.dataset.username;
              const email = this.dataset.email;
              const role = this.dataset.role;
              const street = this.dataset.street;
              const city = this.dataset.city;
              const phone = this.dataset.phone;

              document.getElementById('editUserId').value = id;
              document.getElementById('editUsername').value = username;
              document.getElementById('editEmail').value = email;
              document.getElementById('editRole').value = role;
              document.getElementById('editStreet').value = street;
              document.getElementById('editCity').value = city;
              document.getElementById('editPhone').value = phone;

              document.getElementById('addoreditUser').textContent = 'Edit User';
              document.getElementById('editUserForm').action = '/admin/users';
              
              const modal = document.getElementById('editUserModal');
              modal.style.display = 'flex';
              // Add active class after a small delay for animation
              setTimeout(() => modal.classList.add('active'), 10);
            });
          });
        }

        // Close modal when clicking the close button
        document.getElementById('closeModal').addEventListener('click', function() {
          const modal = document.getElementById('editUserModal');
          modal.classList.remove('active');
          setTimeout(() => modal.style.display = 'none', 300);
        });

        // Close modal when clicking outside
        window.addEventListener('click', function(e) {
          const modal = document.getElementById('editUserModal');
          if (e.target === modal) {
            modal.classList.remove('active');
            setTimeout(() => modal.style.display = 'none', 300);
          }
        });

        // Initial attachment of edit button listeners
        attachEditButtonListeners();
      });
    </script>

    <script src="../js/adminUsers.js"></script>

    <!-- Add i18next and plugins from CDN -->
    <script src="https://unpkg.com/i18next/dist/umd/i18next.min.js"></script>
    <script src="https://unpkg.com/i18next-http-backend/i18nextHttpBackend.min.js"></script>
    <script src="https://unpkg.com/i18next-browser-languagedetector/i18nextBrowserLanguageDetector.min.js"></script>
    <script src="/js/i18n.js"></script>
  </body>
</html>
